######################
# Stage: Builder
FROM ruby:2.7.1-alpine as Builder

RUN apk add --update --no-cache \
  build-base \
  postgresql-dev \
  git \
  nodejs \
  yarn \
  tzdata

WORKDIR /app

# Install gems
ADD Gemfile* /app/
RUN bundle config set --global frozen 1 \
  && bundle install --without test:development:staging -j4 --retry 3 \
  # Remove unneeded files (cached *.gem, *.o, *.c)
  && rm -rf /usr/local/bundle/cache/*.gem \
  && find /usr/local/bundle/gems/ -name "*.c" -delete \
  && find /usr/local/bundle/gems/ -name "*.o" -delete

# Install yarn packages
COPY package.json yarn.lock /app/
RUN yarn install --production

# Add the Rails app
COPY . .

# Precompile assets
ARG MASTER_KEY
RUN RAILS_ENV=production RAILS_MASTER_KEY=${MASTER_KEY} bundle exec rake assets:precompile \
  && bundle exec rake webpacker:compile

# Remove folders not needed in resulting image
RUN rm -rf node_modules tmp/cache app/assets vendor/assets lib/assets spec

###############################
# Stage Runtime
FROM ruby:2.7.1-alpine

ENV RAILS_ENV=production
ENV BUNDLE_APP_CONFIG=/app/.bundle

# Set working directory
WORKDIR /app

# Add Alpine packages
RUN apk add --update --no-cache \
  postgresql-client \
  bash \
  nodejs \
  tzdata

# Copy app with gems from former build stage
COPY --from=Builder /app /app

# Set Rails environment variables
ENV RAILS_LOG_TO_STDOUT true
ENV RAILS_SERVE_STATIC_FILES true
ENV PORT 8080

# Set DB_PASS environment variable from ARG
ARG DB_PASS
ENV DATABASE_PASSWORD=${DB_PASS}

# Set RAILS_MASTER_KEY to config/master.key from ARG
ARG MASTER_KEY
ENV RAILS_MASTER_KEY=${MASTER_KEY}

# Expose Puma port
EXPOSE 8080

# Start up
RUN chmod +x /app/entrypoint.sh
ENTRYPOINT ["/app/entrypoint.sh"]